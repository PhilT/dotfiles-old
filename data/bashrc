# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# ignore duplicates or commands prepended with space
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

HISTSIZE=4000
HISTFILESIZE=4000

export LANG=en_GB.UTF-8

# update LINES and COLUMNS after each command.
shopt -s checkwinsize

# Add color
alias less='less -R'
alias grep='grep --color=auto'
alias ls='ls --color=auto'

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

alias cls='reset && clear'
alias off='sudo systemctl poweroff'
alias boot='sudo systemctl reboot'

alias pacupg='sudo pacman -Syu' # Sync and upgrade all packages
alias pacin='sudo pacman -S'    # Install package
alias pacrem='sudo pacman -Rns' # Remove package and dependencies
alias pacins='sudo pacman -U'   # Install package from a file
alias pacreps='pacman -Ss'      # Search for package in the repos
alias paclist='pacman -Q --color always | less' # List installed packages

# Install gems and create binstubs for bundler
alias bb='bundle && bundle --binstubs=.bin'

# Halve the size of all images in the current folder
alias halfsize='ls *.* | xargs -n1 --replace convert -verbose {} -resize 50% {}'

# Slideshow with feh image viewer
# Press ENTER to load current image into Gimp. H to pause slideshow
#   slide <file or folder>
slide () {
  feh --action "gimp '%f'" --fullscreen --auto-zoom --borderless --slideshow-delay 5 --sort name
}


pac () {
  sudo pacman -S --noconfirm --noprogressbar --needed $@
}

aur () {
  shortcode=$1
  name=$2
  url="https://aur.archlinux.org/packages/$shortcode/$name/$name.tar.gz"
  mkdir -p ~/packages
  cd ~/packages
  rm -rf $name
  curl -s $url | tar -zx
  cd $name
  makepkg -sf --noprogressbar --noconfirm
  sudo pacman -U --noconfirm --noprogressbar --needed /tmp/$name*.pkg.tar
}

# Clone or update a git repo
gup () {
  repo=$1
  other=$2

  if [[ $other = true ]]; then
    host=$PRIVATE_GIT
  elif [[ ! $other ]]; then
    host=$PUBLIC_GIT
  else
    host=https://github.com/$other
  fi

  if [ -d $repo ]; then
    echo updating $repo
    cd $repo
    git pull -q
    cd - > /dev/null
  else
    echo cloning $repo
    git clone -q $host/$repo
  fi
}

export -f aur gup pac

# Colour-coded prompt
#     machine-name current-dir rubyversion@gemset [branch] $
#
parse_git_branch () {
  git symbolic-ref -q HEAD 2> /dev/null | sed 's/refs\/heads\/\(.*\)/ \1/'
}
PURPLE="\[\e[0;35m\]"
BLUE="\[\e[0;34m\]"
RED="\[\e[0;31m\]"
YELLOW="\[\e[0;33m\]"
NORMAL="\[\e[m\]"
BRANCH="\$(parse_git_branch)"
PS1="$PURPLE\h $BLUE\w$RED$RVM$YELLOW$BRANCH $PURPLE\$$NORMAL "
